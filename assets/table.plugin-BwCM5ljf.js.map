{"version":3,"file":"table.plugin-BwCM5ljf.js","sources":["../../src/utils/plugins/table/useTableSelection.ts","../../src/utils/plugins/table/useTableSearch.ts","../../src/utils/plugins/table/useTableData.ts","../../src/utils/plugins/table/useTableDelete.ts","../../src/utils/plugins/table/useTableExport.ts","../../src/utils/plugins/table/useTableToggleSwitch.ts","../../src/utils/plugins/table.plugin.ts"],"sourcesContent":["import { ref, computed } from 'vue';  // 从 Vue 引入 `ref` 和 `computed`\n\n// 定义一个接口 selectionData，用于描述选中行的数据结构\ninterface selectionData {\n    id: number;  // 每一行的数据中必须有 id 字段\n}\n\n// 用于处理表格选择行相关的功能\nexport function useTableSelection() {\n    // 声明变量 selectedRows，用于存储当前选中的行数据\n    const selectedRows = ref<any[]>([]);\n\n    // 处理选中行变化的函数\n    const handleSelectionChange = (selection: selectionData[]) => {\n        console.log(\"当前选中后\", selection);  // 打印当前选中的行数据\n        selectedRows.value = selection;  // 更新 selectedRows，存储选中的行数据\n    };\n\n    // 计算属性 hasSelectedRows，用于判断是否有选中的行\n    const hasSelectedRows = computed(() => selectedRows.value.length > 0);  // 如果 selectedRows 的长度大于 0，表示有选中的行\n\n    // 返回选中的行数据、选中行变化处理函数和是否有选中行的计算属性\n    return {\n        selectedRows,  // 返回选中的行数据\n        handleSelectionChange,  // 返回处理选中行变化的函数\n        hasSelectedRows,  // 返回是否有选中行的计算属性\n    };\n}\n","import { ref } from \"vue\";\n\n// 用于管理搜索框显示与隐藏的功能\nexport function useTableSearchDisplay(initialState: boolean = false) {\n    // 定义一个响应式变量 isVisible，用于控制搜索框的可见性\n    const isVisible = ref(initialState);\n\n    // 切换搜索框可见性的函数\n    const toggleVisibility = () => {\n        isVisible.value = !isVisible.value; // 反转 isVisible 的值\n    };\n\n    // 返回 isVisible 和 toggleVisibility 以便外部使用\n    return { isVisible, toggleVisibility };\n}\n\n// 用于管理搜索参数的功能\nexport function useSearchParams(initialState = {}) {\n    // 定义一个响应式变量 searchParams，用于存储搜索参数\n    const searchParams = ref({ ...initialState });\n\n    // 重置搜索参数的函数\n    const resetSearchParams = () => {\n        searchParams.value = { ...initialState }; // 将 searchParams 重置为初始值\n    };\n\n    // 返回 searchParams 和 resetSearchParams 以便外部使用\n    return {\n        searchParams,\n        resetSearchParams,\n    };\n}\n","import { type Ref, ref } from \"vue\";  // 引入 `ref` 和 `Ref` 类型\nimport {getTableData} from \"@/api/api.ts\";  // 引入请求方法\n\n// 分页配置接口\nexport interface PaginationConfig {\n    current_page: number;\n    page_size: number;\n    page_total: number;\n}\n\n// 表格配置接口\nexport interface TableConfig extends PaginationConfig {\n    search_visible: boolean;\n    data: any[];\n    search: any[];\n    admin?: boolean;\n}\n// 使用固定 API 获取表格数据\nexport const useTablePlugin = (api:string,searchParams: Ref<Record<string, any>>) => {\n    const data = ref<TableConfig>({\n        search_visible: true,\n        current_page: 1,\n        page_size: 10,\n        page_total: 0,\n        data: [],\n        admin:false,\n        search: []\n    });\n\n    // 主加载方法，接收参数（如搜索条件）\n    const loadData = async () => {\n        console.log(\"搜索\", searchParams.value);\n\n        try {\n            // 调用 getComplaintList 请求并传递分页和搜索条件\n            const res = await getTableData(\n                api,\n                data.value.current_page,\n                data.value.page_size,\n                { ...searchParams.value } // 合并搜索条件\n            );\n            const { admin, total, current_page, per_page, data: tableData } = res.data\n            data.value.admin = admin\n            if (total > 0) {\n                data.value.current_page = current_page;\n                data.value.page_size = per_page;\n                data.value.page_total = total;\n                data.value.data = [...tableData];\n            } else {\n                data.value.data = [];\n                data.value.page_total = 0;\n            }\n        } catch (error) {\n            console.error(\"加载数据失败\", error);  // 捕获请求错误\n        }\n    };\n\n    // 刷新数据（页码重置为 1）\n    const refreshData = (params: any = {}) => {\n        console.log(params);\n        data.value.current_page = 1;\n        loadData();\n    };\n\n    // 每页数量变化\n    const handleSizeChange = (size: number, params: any = {}) => {\n        console.log(params);\n        data.value.page_size = size;\n        loadData();\n    };\n\n    // 页码变化\n    const handleCurrentChange = (page: number, params: any = {}) => {\n        console.log(page, params);\n        data.value.current_page = page;\n        loadData();\n    };\n\n    return {\n        data,\n        loadData,\n        refreshData,\n        handleSizeChange,\n        handleCurrentChange,\n    };\n};\n","import type { Ref } from 'vue';\nimport { ElMessageBox, ElMessage } from 'element-plus';\nimport {del} from \"@/api/api.ts\";\nexport const useTableDelete = (\n    defaultSelectedRef?: Ref<any[]>,\n    onSuccess?: () => void\n) => {\n    const deleteRows = async (api: string, idsToDelete?: any[]) => {\n        let effectiveIds: any[] = [];\n\n        // 优先使用传入的 ids\n        if (Array.isArray(idsToDelete) && idsToDelete.length > 0) {\n            effectiveIds = idsToDelete;\n        } else if (defaultSelectedRef && defaultSelectedRef.value.length > 0) {\n            // 如果没传，尝试使用 defaultSelectedRef\n            effectiveIds = defaultSelectedRef.value.map(row => row.id);\n        }\n\n        if (effectiveIds.length === 0) {\n            ElMessage.error(\"没有选中任何数据\");\n            return;\n        }\n\n        try {\n            await ElMessageBox.confirm(\n                `确定要删除选中的 ${effectiveIds.length} 条数据吗？`,\n                '提示',\n                {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning',\n                }\n            );\n\n            // 发起删除请求\n            const data  = await del(api,effectiveIds);\n\n            // 根据返回结果提示\n            if (data.status) {\n                ElMessage.success(\"操作成功\");\n                onSuccess?.();\n            }\n        } catch (error) {\n            // 如果用户取消了删除或请求失败\n            if (error !== 'cancel') {\n                // ElMessage.error(\"删除失败或已取消\");\n            }\n        }\n\n    };\n\n    return {\n        deleteRows,\n    };\n};\n","import type {Ref} from 'vue';\nimport {ElMessage, ElMessageBox} from 'element-plus';\nimport {exportTable} from \"@/api/api.ts\";\n\nexport const useTableExport = (\n    defaultSelectedRef?: Ref<any[]>,\n    extraParams?: Ref<any[]>,\n    onSuccess?: () => void\n) => {\n    const tableExport  = async (api: string,export_all_data:boolean) => {\n        console.log(\"extraParams\",);\n        let effectiveIds: any[] = [];\n        const isExportAll = export_all_data;\n\n        console.log(defaultSelectedRef)\n            // 如果没传，尝试使用 defaultSelectedRef\n            if (defaultSelectedRef?.value) {\n                effectiveIds = defaultSelectedRef.value.map(row => row.id);\n            }\n        if (!isExportAll) {\n            if (effectiveIds.length === 0) {\n                ElMessage.error(\"没有选中任何数据\");\n                return;\n            }\n\n            try {\n                await ElMessageBox.confirm(\n                    `确定要导出选中的 ${effectiveIds.length} 条数据吗？`,\n                    '提示',\n                    {\n                        confirmButtonText: '确定',\n                        cancelButtonText: '取消',\n                        type: 'warning',\n                    }\n                );\n\n                // 请求后端导出接口，返回 blob 文件流\n                const blob: Blob = await exportTable(api, effectiveIds); // 确保返回的是 Blob\n\n                // 下载文件\n                const url = window.URL.createObjectURL(blob);\n                const link = document.createElement('a');\n                link.href = url;\n\n                const now = new Date();\n                const pad = (n: number) => n.toString().padStart(2, '0');\n                link.download = `${now.getFullYear()}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}.xlsx`;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                window.URL.revokeObjectURL(url);\n\n                ElMessage.success(\"导出成功\");\n                onSuccess?.();\n            } catch (error: any) {\n                if (error !== 'cancel') {\n                    ElMessage.error(\"导出失败，请稍后重试\");\n                    console.error(error);\n                }\n            }\n        } else{\n            try {\n                await ElMessageBox.confirm(\n                    `确定要导出全部数据吗？`,\n                    '提示',\n                    {\n                        confirmButtonText: '确定',\n                        cancelButtonText: '取消',\n                        type: 'warning',\n                    }\n                );\n\n                // 请求后端导出接口，返回 blob 文件流\n                const blob: Blob = await exportTable(api, effectiveIds, extraParams?.value); // 确保返回的是 Blob\n\n                // 下载文件\n                const url = window.URL.createObjectURL(blob);\n                const link = document.createElement('a');\n                link.href = url;\n\n                const now = new Date();\n                const pad = (n: number) => n.toString().padStart(2, '0');\n                link.download = `${now.getFullYear()}${pad(now.getMonth() + 1)}${pad(now.getDate())}${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}.xlsx`;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                window.URL.revokeObjectURL(url);\n\n                ElMessage.success(\"导出成功\");\n                onSuccess?.();\n            } catch (error: any) {\n                if (error !== 'cancel') {\n                    ElMessage.error(\"导出失败，请稍后重试\");\n                    console.error(error);\n                }\n            }\n        }\n\n    };\n\n    return {\n        tableExport,\n    };\n};\n","import {ElMessage} from \"element-plus\";\nimport {toggleSwitch as toggleSwitchApi} from \"@/api/api.ts\";\n\nexport const useTableToggleSwitch = (onSuccess?: () => void) => {\n\n    const toggleSwitch = async (api: string, id: number, status?: number) => {\n        console.log('toggleSwitch called with:', { api, id, status });\n\n        try {\n            const data = await toggleSwitchApi(api, id, status);\n\n            // 根据返回结果提示\n            if (data.status) {\n                ElMessage.success(\"操作成功\");\n                onSuccess?.();\n            } else {\n                ElMessage.error((data as any).message || \"操作失败\");\n            }\n        } catch (error) {\n            console.error('toggleSwitch error:', error);\n            ElMessage.error(\"操作失败\");\n        }\n\n    }\n\n    return {\n        toggleSwitch\n    }\n}","// 导入表格选中相关模块\nimport { useTableSelection } from \"./table/useTableSelection.ts\";\n\n// 导入搜索相关方法\nimport {useTableSearchDisplay, useSearchParams} from \"./table/useTableSearch.ts\";\n\n// 导入表格数据相关插件\nimport {useTablePlugin} from \"@/utils/plugins/table/useTableData.ts\";\nimport {useTableDelete} from \"@/utils/plugins/table/useTableDelete.ts\";\nimport {useTableExport} from \"@/utils/plugins/table/useTableExport.ts\";\nimport {useTableToggleSwitch} from \"@/utils/plugins/table/useTableToggleSwitch.ts\";\n\n\n\nexport function useTableDataPlugin(api:string) {\n    // 获取表格选中相关数据和方法\n    const selection = useTableSelection();\n\n    // 获取搜索相关数据和方法\n    const search = useTableSearchDisplay();\n\n    // 获取搜索参数\n    const searchParams = useSearchParams();\n\n    // 获取表格数据相关插件\n    const table = useTablePlugin(api, searchParams.searchParams);\n\n    // 删除相关数据\n    const deleteRows = useTableDelete(selection.selectedRows,table.refreshData);\n\n    // 开关按钮操作\n    const toggleSwitch = useTableToggleSwitch(table.refreshData)\n\n    // 导出表格\n    const tableExport = useTableExport(selection.selectedRows, searchParams.searchParams);\n    return {\n        ...selection,\n        ...search,\n        ...table,\n        ...searchParams,\n        ...deleteRows,\n        ...toggleSwitch,\n        ...tableExport,\n    }\n}"],"names":["useTableSelection","selectedRows","ref","handleSelectionChange","selection","hasSelectedRows","computed","useTableSearchDisplay","initialState","isVisible","useSearchParams","searchParams","useTablePlugin","api","data","loadData","res","getTableData","admin","total","current_page","per_page","tableData","error","params","size","page","useTableDelete","defaultSelectedRef","onSuccess","idsToDelete","effectiveIds","row","ElMessage","ElMessageBox","del","useTableExport","extraParams","export_all_data","isExportAll","blob","exportTable","url","link","now","pad","n","useTableToggleSwitch","id","status","toggleSwitchApi","useTableDataPlugin","search","table","deleteRows","toggleSwitch","tableExport"],"mappings":"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"}